---
description: 任意のワークスペースで必ず適用されるファイル
globs: *
alwaysApply: true
---
# ワークスペースセットアップファイル

このファイルは、このワークスペースにおけるあなたとAIアシスタントのセットアップファイルです。
最初の会話でインタラクティブにカスタマイズを行い、あなたの具体的なニーズに合わせた内容をこのファイルに差分として追加します。

# 重要な注意事項
- このファイルの設定はワークスペースのルートフォルダに存在する `.cursorrules` の内容と競合しないように設計してください。
- インタラクティブセットアッププロセスは最大 10 回のやり取りで完了します。
- インタラクティブセットアッププロセスは必ず実行してください。スキップは絶対に許可されません。
- AIアシスタントは必ずユーザーからのすべての質問に対して回答を収集し、この設定ファイルに保存する必要があります。
- セットアッププロセスが中断された場合は、必ず再開して完了させてください。

# インタラクティブセットアッププロセス - 共通質問項目

初回起動時、AIアシスタントは以下の項目についてあなたに質問します:

1. このワークスペースの目的: どのようなプロジェクトに取り組んでいるのか、または取り組もうとしているのか
=== ここから ===
.cursorrules や project_rules.mdc また、他の editor の rules を自身の開発環境に対して install できるような installer を作りたいと思っています。

デフォルトは私のお手製のリポジトリのファイル類（templates フォルダ配下にシンボリックリンクを貼っているので見ておいてください）がインストールされる予定（このテンプレートも入れ替え可能にしたい）。そしていずれはコマンドで awesome-cursorrules リポジトリから好きなルールセットをワークスペースむけの設定ファイル（cursor なら mdc）としてインストールしてこれるようにしたいのです。

このプロジェクトは OSS として公開する予定です。
=== ここまで ===

2. 技術スタック: 使用している言語、フレームワーク、ツール、未決定なのであればあなたのニーズに関する要件
=== ここから ===
- Go 1.24.0
- mise によるバージョン管理
- golangci-lint 1.64.6
- 主要なライブラリ：
  - github.com/spf13/cobra: CLIフレームワーク
  - github.com/mitchellh/go-homedir: ホームディレクトリ操作
  - github.com/stretchr/testify: テストフレームワーク
- プロジェクト構造：
  - pkg/installer: インストーラーのコアロジック
  - pkg/version: バージョン管理関連
  - templates/: デフォルトのルールセット
=== ここまで ===

3. コミュニケーションスタイル: 希望する応答の詳細度、形式、専門用語レベル
=== ここから ===
- コード関連：
  - コードコメント：英語
  - ドキュメント：英語（基本）、日本語（要望時）
  - コードレビューコメント：英語
- コミュニケーション：
  - 会話：日本語
  - コードレビュー時の会話：日本語
=== ここまで ===

4. 特定の要件: コード品質、パフォーマンス、セキュリティなどに関する特別な要件
=== ここから ===
- 動作環境：
  - Windows
  - macOS
  - Linux (RedHat系、Debian系)
- 権限要件：
  - 管理者権限不要
  - 将来的に各OSのパッケージマネージャー（Homebrew、Scoop、apt、yarn）に対応
- ファイル操作：
  - 既存ファイルのバックアップ（.backup suffix）
  - 上書き禁止
- アンインストール：
  - パッケージマネージャー側で対応
=== ここまで ===

5. ワークフロー: あなたの開発ワークフローや好みの作業方法
=== ここから ===
- テスト環境：
  - Makefileによる`make test`コマンド
  - CIでの各OSテスト実行
  - カバレッジ測定（活用不足）
  - テスト結果の可視化が不十分
- CI/CD：
  - GitHub ActionsによるCI
  - CDは未実装
- バージョニング：
  - セマンティックバージョニング採用
  - ビルド時にバージョン情報を埋め込み
=== ここまで ===

# インタラクティブセットアッププロセス - カスタマイズ可能な項目

1 ~ 5 のやりとりを踏まえて、より高精度で目的を達成するための追加質問を 6 ~ max 10 まで行います。
不要になった行は削除してください。例えば 9 までヒアリングしたところで純分な結果が得られた場合は 10 をコメントアウトしてください。

6. カスタマイズ可能な項目: インストール時の設定カスタマイズ（デフォルトパス、バックアップ設定等）は必要ですか？
=== ここから ===
設定カスタマイズか、あったほうがいいのかな。ユースケースがあれば設定可能にしたいし、ないなら不要なものは作りたくない。

テンプレートのカスタマイズは欲しいね。デフォルトは私のリポジトリのものを使わせたいけど、こだわりがある人はデフォルトを好きなのものに変えられるようにしたい。

インストール時の対話的な設定はあると嬉しいね。getnf というモジュールを知っている？nerd font の installer なんだけどあんな感じを求めてますね。
=== ここまで ===

7. カスタマイズ可能な項目: リポジトリ構造について（現在の構造、追加予定のディレクトリ、テンプレート管理方法）
=== ここから ===
現在のリポジトリの構造は最終構造にすべきなのか判断がつかないです。ただ、できるだけ go のリポジトリのプラクティスに従いたいなと思っています。もちろんどうしてもプラクティスに沿えない場合は臨機応変に判断したいと思っています。

追加のディレクトリやファイルは、これも開発しながら必要に応じて作っていきたいです。

テンプレートの管理方法もどうするのがいいかな。今のようにシンボリックリンクでビルトインにするのは微妙だと思っていて、動的に最新を撮ってこれるようにしたいなと思っています。
=== ここまで ===

8. カスタマイズ可能な項目: インストーラーの機能について（追加機能、検索機能、検証機能）
=== ここから ===
追加機能は今は思いついて居ないです。ただ awesome-cursorrules リポジトリから動的に欲しいルールセットをとってこれるような機能は今は実装前なのでそれは必ず実装したいと思っています。

検索機能はいらないかな、getnf のようにリスティングできれば嬉しいし、あまりにも多くなりすぎるようならコマンドでリスティングするようにするのもいいかもしれない。

検証機能はいらないかな、事前に正しくインストールがされるということをテストで担保したい。
=== ここまで ===

9. カスタマイズ可能な項目: ユーザーエクスペリエンスについて（CLIデザイン、エラーハンドリング、多言語対応）
=== ここから ===
CLI のデザインは特にこだわりはないですが、cobra というモジュールに則って作りたいです。

エラーハンドリングもプラクティスを知らないのでいいのがあればそれを採用したい。今は特に何もこだわりがなく errors や fmt を利用している。

多言語サポートは一旦不要かな。日本語と英語だけあればいいよ。デフォルトは英語ね。
=== ここまで ===

10. カスタマイズ可能な項目: プロジェクトのタイムラインと優先順位について（MVP、開発優先順位、完了目標時期）
=== ここから ===
awesome-cursorrules から引いてこれる機能は必ず入れたい。

awesome-cursorrules から引いてこれる機能を優先して作りたい。

完了目標は特にないけど今月中には作りたいかな。
=== ここまで ===


# 追加ショートカット

- `/setup` : セットアッププロセスを開始します。途中で中断したいと言われたら中断して setup 前の内容に revert します。
- `/adjust`: 追加で最大 5 回までのやり取りを通じて現在の .cursorrules の内容をファインチューニングします。 